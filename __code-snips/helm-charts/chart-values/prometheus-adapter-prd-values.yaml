affinity: {}
image:
  repository: directxman12/k8s-prometheus-adapter-amd64
  tag: v0.7.0
  pullPolicy: IfNotPresent
logLevel: 4
metricsRelistInterval: 15s
listenPort: 6443
nodeSelector: {}
priorityClassName: ""
prometheus:
  url: http://prometheus-server.prometheus.svc.cluster.local
  port: 9090
  path: ""

replicas: 1

rbac:
  create: true

serviceAccount:
  create: true
  name:

resources:
  requests:
    cpu: 100m
    memory: 1G
  limits:
    cpu: 100m
    memory: 1G

rules:
  default: true
  custom: 
  - seriesQuery: '{exported_job="selenium-scraper", verb="stress"}'
    resources: 
      overrides:
        kubernetes_pod_name: {resource: "pod"}
        kubernetes_namespace: {resource: "namespace"}
        kubernetes_deployment: {resource: "deployment"}
    name: { as:  selenium_stress }
    metricsQuery: '<<.Series>>'
  
  external:
  - seriesQuery: '{exported_job="selenium-scraper", verb="stress"}'
    resources: 
      overrides:
        kubernetes_pod_name: {resource: "pod"}
        kubernetes_namespace: {resource: "namespace"}
    name: { as:  selenium_stress_ext }
    metricsQuery: '<<.Series>>'
  resource: 
  cpu:
    containerQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>}[3m])) by (<<.GroupBy>>)
    nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[3m])) by (<<.GroupBy>>)
    resources:
      overrides:
        instance:
          resource: node
        namespace:
          resource: namespace
        pod:
          resource: pod
    containerLabel: container
  memory:
    containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>}) by (<<.GroupBy>>)
    nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
    resources:
      overrides:
        instance:
          resource: node
        namespace:
          resource: namespace
        pod:
          resource: pod
    containerLabel: container
  window: 3m

service:
  annotations: {}
  port: 443
  type: ClusterIP

tls:
  enable: false
  ca: |-
    # Public CA file that signed the APIService
  key: |-
    # Private key of the APIService
  certificate: |-
    # Public key of the APIService

# Any extra volumes
extraVolumes: []
  # - name: example-name
  #   hostPath:
  #     path: /path/on/host
  #     type: DirectoryOrCreate
  # - name: ssl-certs
  #   hostPath:
  #     path: /etc/ssl/certs/ca-bundle.crt
  #     type: File

# Any extra volume mounts
extraVolumeMounts: []
  #   - name: example-name
  #     mountPath: /path/in/container
  #   - name: ssl-certs
  #     mountPath: /etc/ssl/certs/ca-certificates.crt
  #     readOnly: true

tolerations: []

# Labels added to the pod
podLabels: {}

# Annotations added to the pod
podAnnotations: {}

hostNetwork:
  enabled: false